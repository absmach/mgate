// Code generated by mockery v2.38.0. DO NOT EDIT.

// Copyright (c) Abstract Machines

package mocks

import (
	context "context"

	packets "github.com/eclipse/paho.mqtt.golang/packets"
	mock "github.com/stretchr/testify/mock"

	session "github.com/absmach/mproxy/pkg/session"
)

// Interceptor is an autogenerated mock type for the Interceptor type
type Interceptor struct {
	mock.Mock
}

// Intercept provides a mock function with given fields: ctx, pkt, dir
func (_m *Interceptor) Intercept(ctx context.Context, pkt packets.ControlPacket, dir session.Direction) (packets.ControlPacket, error) {
	ret := _m.Called(ctx, pkt, dir)

	if len(ret) == 0 {
		panic("no return value specified for Intercept")
	}

	var r0 packets.ControlPacket
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, packets.ControlPacket, session.Direction) (packets.ControlPacket, error)); ok {
		return rf(ctx, pkt, dir)
	}
	if rf, ok := ret.Get(0).(func(context.Context, packets.ControlPacket, session.Direction) packets.ControlPacket); ok {
		r0 = rf(ctx, pkt, dir)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(packets.ControlPacket)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, packets.ControlPacket, session.Direction) error); ok {
		r1 = rf(ctx, pkt, dir)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewInterceptor creates a new instance of Interceptor. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewInterceptor(t interface {
	mock.TestingT
	Cleanup(func())
}) *Interceptor {
	mock := &Interceptor{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
