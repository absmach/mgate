// Code generated by mockery v2.38.0. DO NOT EDIT.

// Copyright (c) Abstract Machines

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// Handler is an autogenerated mock type for the Handler type
type Handler struct {
	mock.Mock
}

// AuthConnect provides a mock function with given fields: ctx
func (_m *Handler) AuthConnect(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for AuthConnect")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AuthPublish provides a mock function with given fields: ctx, topic, payload
func (_m *Handler) AuthPublish(ctx context.Context, topic *string, payload *[]byte) error {
	ret := _m.Called(ctx, topic, payload)

	if len(ret) == 0 {
		panic("no return value specified for AuthPublish")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *string, *[]byte) error); ok {
		r0 = rf(ctx, topic, payload)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AuthSubscribe provides a mock function with given fields: ctx, topics
func (_m *Handler) AuthSubscribe(ctx context.Context, topics *[]string) error {
	ret := _m.Called(ctx, topics)

	if len(ret) == 0 {
		panic("no return value specified for AuthSubscribe")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *[]string) error); ok {
		r0 = rf(ctx, topics)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Connect provides a mock function with given fields: ctx
func (_m *Handler) Connect(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Connect")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Disconnect provides a mock function with given fields: ctx
func (_m *Handler) Disconnect(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Disconnect")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Publish provides a mock function with given fields: ctx, topic, payload
func (_m *Handler) Publish(ctx context.Context, topic *string, payload *[]byte) error {
	ret := _m.Called(ctx, topic, payload)

	if len(ret) == 0 {
		panic("no return value specified for Publish")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *string, *[]byte) error); ok {
		r0 = rf(ctx, topic, payload)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Subscribe provides a mock function with given fields: ctx, topics
func (_m *Handler) Subscribe(ctx context.Context, topics *[]string) error {
	ret := _m.Called(ctx, topics)

	if len(ret) == 0 {
		panic("no return value specified for Subscribe")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *[]string) error); ok {
		r0 = rf(ctx, topics)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Unsubscribe provides a mock function with given fields: ctx, topics
func (_m *Handler) Unsubscribe(ctx context.Context, topics *[]string) error {
	ret := _m.Called(ctx, topics)

	if len(ret) == 0 {
		panic("no return value specified for Unsubscribe")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *[]string) error); ok {
		r0 = rf(ctx, topics)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewHandler creates a new instance of Handler. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewHandler(t interface {
	mock.TestingT
	Cleanup(func())
}) *Handler {
	mock := &Handler{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
